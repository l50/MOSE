trigger:
- master

schedules:
- cron: "0 0 * * 0"
  displayName: Weekly midnight (UTC) build
  branches:
    include:
    - master
  always: true

pool:
  vmImage: 'ubuntu-16.04'

variables:
  GOPATH: '$(Agent.BuildDirectory)/gopath' # Go workspace path
  GOROOT: '$(Agent.BuildDirectory)/go' # Go installation path
  GOBIN:  '$(GOPATH)/bin' # Go binaries path
  modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code

steps:
- script: |
    wget "https://golang.org/dl/go1.14.6.linux-amd64.tar.gz" --output-document "$(Agent.BuildDirectory)/go1.14.6.tar.gz"
    tar -C '$(Agent.BuildDirectory)' -xzf "$(Agent.BuildDirectory)/go1.14.6.tar.gz"
  displayName: 'Install Go 1.14.6'

- script: |
    mkdir -p '$(GOBIN)'
    mkdir -p '$(GOPATH)/pkg'
    mkdir -p '$(modulePath)'
    mkdir -p '$(GOROOT)'
    shopt -s extglob
    shopt -s dotglob
    mv !(gopath) '$(modulePath)'
    echo '##vso[task.prependpath]$(GOBIN)'
    echo '##vso[task.prependpath]$(GOROOT)/bin'
  displayName: 'Set up the Go workspace'

- script: |
    go get github.com/markbates/pkger/cmd/pkger
    export GO111MODULE=on
    go get
    go build
    mkdir -p payloads
  displayName: 'Build MOSE'
  workingDirectory: "$(modulePath)"

# Puppet
- script: |
    export GO111MODULE=on
    ./mose puppet -c "touch /tmp/test.txt && echo test >> /tmp/test.txt"  -f $(modulePath)/payloads/puppet-linux
  displayName: 'Generate a puppet payload'
  workingDirectory: "$(modulePath)"

- script: | 
    git clone https://github.com/master-of-servers/puppet-test-lab.git
    cd puppet-test-lab && cd basic
    docker-compose up -d --build
    sleep 60
    # Enroll agent with puppet master
    docker exec -i basic-puppetagent /bin/bash -c "puppet agent -t --waitforcert=240"
    docker ps
  displayName: 'Build and configure the puppet test environment'
  workingDirectory: "$(modulePath)"

- script: | 
    # Copy MOSE payload to puppet master
    docker cp $(modulePath)/payloads/puppet-linux basic-puppetmaster:/puppet-linux

    # Run MOSE against the puppet master
    docker exec -i basic-puppetmaster /bin/bash -c "echo 'Y' | /puppet-linux"
    # Run puppet agent -t to enact the changes made by MOSE
    docker exec -i basic-puppetagent /bin/bash -c "puppet agent -t"

    # Ensure that MOSE is working properly by running cat on the file it created
    docker exec -i basic-puppetagent /bin/bash -c "cat /tmp/test.txt"
  displayName: 'Run MOSE generated payload on the puppet test environment'
  workingDirectory: "$(modulePath)"

- script: |
    echo 'echo testing file upload > /tmp/file_upload_test.txt' > payloads/notevil.sh
    export GO111MODULE=on
    ./mose puppet -u payloads/notevil.sh  -f payloads/puppet-linux
  displayName: 'Generate a puppet payload to test file upload'
  workingDirectory: "$(modulePath)"

- script: | 
    # Copy MOSE payload to puppet master
    docker cp $(modulePath)/payloads/puppet-linux.tar basic-puppetmaster:/puppet-linux.tar
    
    # Run MOSE against the puppet master
    docker exec -i basic-puppetmaster /bin/bash -c "tar -xvf puppet-linux.tar"
    docker exec -i basic-puppetmaster /bin/bash -c "echo 'Y' | /puppet-linux"
    # Run puppet agent -t to enact the changes made by MOSE
    docker exec -i basic-puppetagent /bin/bash -c "puppet agent -t"
    
    # Ensure that MOSE is working properly by running cat on the file it created
    docker exec -i basic-puppetagent /bin/bash -c "cat /tmp/file_upload_test.txt"
  displayName: 'Run MOSE generated file upload payload on the puppet test environment'
  workingDirectory: "$(modulePath)"
# End Puppet

# Chef
- script: |
    sudo apt-get update -y
    sudo DEBIAN_FRONTEND=noninteractive apt-get install -y tzdata
    sudo apt-get install -y expect
    export GO111MODULE=on
    expect scripts/test_chef_workstation.exp
  displayName: 'Generate a chef payload for workstation in the chef test environment'
  workingDirectory: "$(modulePath)"

- script: | 
    git clone https://github.com/master-of-servers/chef-test-lab.git
    cd chef-test-lab
    cd docker/basic
    bash create_ssh_key.sh
    docker-compose up -d --build
    echo "Sleeping for 12 minutes (720 seconds) while waiting for the chef environment to finish building."
    sleep 720
    docker ps
  displayName: 'Build and configure the chef test environment'
  workingDirectory: "$(modulePath)"

- script: | 
    # Copy MOSE payload to workstation
    docker cp $(modulePath)/payloads/chef-linux basic-chef-workstation:/chef-linux
    # This is very annoying and redundant work, but it seems to need to be done for the pipeline
    docker exec -i basic-chef-workstation /bin/bash -c "cd /root/.chef/cookbooks && rm -rf chef-client && knife supermarket download chef-client && tar -xvf chef-client-*; rm *tar*"
    docker exec -i basic-chef-workstation /bin/bash -c "cd /root/.chef/cookbooks && cp hello/Berksfile chef-client/Berksfile"
    docker exec -i basic-chef-workstation /bin/bash -c "cd /root/.chef/cookbooks/chef-client && berks install && berks upload"
    docker exec -i basic-chef-workstation /bin/bash -c "cd /root/.chef/ && knife ssl fetch && knife upload cookbooks"
    docker exec -i basic-chef-workstation knife vault create secret_vault mysql_pw '{"user": "mysql", "password": "TheM0stS3cr3T!!!"}'
    # Bootstrap agent with chef server
    docker exec -i basic-chef-workstation /bin/bash -c "knife bootstrap chef-agent-1 -u root -P toor --sudo -N chef-agent-1 --run-list 'recipe[hello], recipe[chef-client::config]'"

    # Run MOSE against the workstation
    docker exec -i basic-chef-workstation /bin/bash -c "echo 'n' | /chef-linux"
    # Run chef-client to enact the changes made by MOSE
    docker exec -i basic-chef-agent-1 /bin/bash -c "chef-client"
    
    # Ensure that MOSE is working properly by running cat on the file it created
    docker exec -i basic-chef-agent-1 /bin/bash -c "cat /tmp/test.txt"
  displayName: 'Run MOSE generated payload on workstation in the chef test environment'
  workingDirectory: "$(modulePath)"

- script: |
    echo 'echo testing file upload > /tmp/file_upload_test.txt' > payloads/notevil.sh
    export GO111MODULE=on
    expect scripts/test_chef_workstation_file_upload.exp
  displayName: 'Generate a chef payload to test file upload'
  workingDirectory: "$(modulePath)"

- script: | 
    # Copy MOSE payload to workstation
    docker cp $(modulePath)/payloads/chef-linux.tar basic-chef-workstation:/chef-linux.tar
    
    # Run MOSE against the workstation
    docker exec -i basic-chef-workstation /bin/bash -c "tar -xvf chef-linux.tar"
    docker exec -i basic-chef-workstation /bin/bash -c "echo 'n' | /chef-linux"
    # Run chef-client to enact the changes made by MOSE
    docker exec -i basic-chef-agent-1 /bin/bash -c "chef-client"
    
    # Ensure that MOSE is working properly by running cat on the file it created
    docker exec -i basic-chef-agent-1 /bin/bash -c "cat /tmp/file_upload_test.txt"
  displayName: 'Run MOSE generated file upload payload on workstation in the chef test environment'
  workingDirectory: "$(modulePath)"
# End Chef

# Ansible
- script: |
    export GO111MODULE=on
    ./mose ansible -c "touch /tmp/test.txt && echo test >> /tmp/test.txt" -f $(modulePath)/payloads/ansible-linux
  displayName: 'Generate an ansible payload'
  workingDirectory: "$(modulePath)"

- script: |
    git clone https://github.com/master-of-servers/ansible-test-lab.git
    cd ansible-test-lab && cd basic
    bash files/create_ssh_key.sh
    cp files/authorized_keys control/files
    cp files/id_rsa control/files
    cp files/id_rsa.pub control/files
    cp files/authorized_keys managed/files
    cp files/id_rsa managed/files
    cp files/id_rsa.pub managed/files
    docker-compose up -d --force-recreate --build
    echo "Decrypting the vault file"
    docker exec -i basic-control-node ansible-vault decrypt /root/.ansible/group_vars/vault
    docker exec -i basic-control-node cat /root/.ansible/group_vars/vault
    echo "Encrypting the vault file"
    docker exec -i basic-control-node ansible-vault encrypt /root/.ansible/group_vars/vault
    docker exec -i basic-control-node cat /root/.ansible/group_vars/vault
    echo "Applying the hello playbook to the managed node"
    docker exec -i basic-control-node bash -c "cd ~/.ansible && ansible-playbook site.yml"
  displayName: 'Build and configure the ansible test environment'
  workingDirectory: "$(modulePath)"

- script: | 
    # Copy MOSE payload to ansible control node
    docker cp $(modulePath)/payloads/ansible-linux basic-control-node:/ansible-linux
    docker cp scripts/test_ansible_cmd.exp basic-control-node:/

    # Run MOSE against the control node
    docker exec -i basic-control-node /bin/bash -c "apt-get update -y"
    docker exec -i basic-control-node /bin/bash -c "DEBIAN_FRONTEND=noninteractive apt-get install -y tzdata"
    docker exec -i basic-control-node /bin/bash -c "apt-get install -y expect"
    docker exec -i basic-control-node /bin/bash -c "expect /test_ansible_cmd.exp"
    
    # Run ansible-cookbook to enact the changes made by MOSE
    docker exec -i basic-control-node /bin/bash -c "ansible-playbook /root/.ansible/site.yml"

    # Ensure that MOSE is working properly by running cat on the file it created
    docker exec -i basic-managed-node /bin/bash -c "cat /tmp/test.txt"
  displayName: 'Run MOSE generated payload on the ansible test environment'
  workingDirectory: "$(modulePath)"

- script: |
    echo 'echo testing file upload > /tmp/file_upload_test.txt' > payloads/notevil.sh
    export GO111MODULE=on
    ./mose ansible -u payloads/notevil.sh -f payloads/ansible-linux
  displayName: 'Generate an ansible payload to test file upload'
  workingDirectory: "$(modulePath)"

- script: | 
    # Copy MOSE payload to ansible control node
    docker cp $(modulePath)/payloads/ansible-linux.tar basic-control-node:/ansible-linux.tar
    # Copy MOSE payload to ansible control node
    docker cp scripts/test_ansible_file_upload.exp basic-control-node:/

    # Run MOSE against the control node
    docker exec -i basic-control-node /bin/bash -c "tar -xvf /ansible-linux.tar"
    docker exec -i basic-control-node /bin/bash -c "expect /test_ansible_file_upload.exp"
    
    # Run ansible-cookbook to enact the changes made by MOSE
    docker exec -i basic-control-node /bin/bash -c "ansible-playbook /root/.ansible/site.yml"
    
    # Ensure that MOSE is working properly by running cat on the file it created
    docker exec -i basic-managed-node /bin/bash -c "cat /tmp/test.txt"
  displayName: 'Run MOSE generated file upload payload on the ansible test environment'
  workingDirectory: "$(modulePath)"
# End Ansible

# Salt 
- script: |
    git clone https://github.com/master-of-servers/salt-test-lab.git
    cd salt-test-lab && cd basic
    docker-compose up -d --build
    sleep 60
    # Fix pillar issue
    docker exec -it basic-salt-master /bin/bash -c "salt '*' saltutil.refresh_pillar"
    # Enroll minion with salt master
    docker exec -i basic-salt-master /bin/bash -c "salt '*' state.apply"
    docker exec -i basic-salt-master /bin/bash  -c "salt '*' pillar.items"
  displayName: 'Build and configure salt test environment'
  workingDirectory: "$(modulePath)"
# End Salt

- script: |
   export GO111MODULE=on
   go test -count=1 -v -race ./...
  displayName: 'Run unit tests'
  workingDirectory: "$(modulePath)"
